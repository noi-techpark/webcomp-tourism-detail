// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ActivityPoiReduced } from '../models';
import { ActivityTypes } from '../models';
import { GBLTSActivity } from '../models';
import { GBLTSActivityPoiLocalized } from '../models';
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export const ActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Activity List Localized
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivityFilteredLocalized: async (language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ActivityLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (activitytype !== undefined) {
                localVarQueryParameter['activitytype'] = activitytype;
            }

            if (subtype !== undefined) {
                localVarQueryParameter['subtype'] = subtype;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (areafilter !== undefined) {
                localVarQueryParameter['areafilter'] = areafilter;
            }

            if (distancefilter !== undefined) {
                localVarQueryParameter['distancefilter'] = distancefilter;
            }

            if (altitudefilter !== undefined) {
                localVarQueryParameter['altitudefilter'] = altitudefilter;
            }

            if (durationfilter !== undefined) {
                localVarQueryParameter['durationfilter'] = durationfilter;
            }

            if (highlight !== undefined) {
                localVarQueryParameter['highlight'] = highlight;
            }

            if (difficultyfilter !== undefined) {
                localVarQueryParameter['difficultyfilter'] = difficultyfilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }
            
            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity List
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivityList: async (language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, updatefrom?: string, searchfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (activitytype !== undefined) {
                localVarQueryParameter['activitytype'] = activitytype;
            }

            if (subtype !== undefined) {
                localVarQueryParameter['subtype'] = subtype;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (areafilter !== undefined) {
                localVarQueryParameter['areafilter'] = areafilter;
            }

            if (distancefilter !== undefined) {
                localVarQueryParameter['distancefilter'] = distancefilter;
            }

            if (altitudefilter !== undefined) {
                localVarQueryParameter['altitudefilter'] = altitudefilter;
            }

            if (durationfilter !== undefined) {
                localVarQueryParameter['durationfilter'] = durationfilter;
            }

            if (highlight !== undefined) {
                localVarQueryParameter['highlight'] = highlight;
            }

            if (difficultyfilter !== undefined) {
                localVarQueryParameter['difficultyfilter'] = difficultyfilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity List Reduced
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivityReduced: async (language?: string, activitytype?: string, subtype?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ActivityReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (activitytype !== undefined) {
                localVarQueryParameter['activitytype'] = activitytype;
            }

            if (subtype !== undefined) {
                localVarQueryParameter['subtype'] = subtype;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (areafilter !== undefined) {
                localVarQueryParameter['areafilter'] = areafilter;
            }

            if (distancefilter !== undefined) {
                localVarQueryParameter['distancefilter'] = distancefilter;
            }

            if (altitudefilter !== undefined) {
                localVarQueryParameter['altitudefilter'] = altitudefilter;
            }

            if (durationfilter !== undefined) {
                localVarQueryParameter['durationfilter'] = durationfilter;
            }

            if (highlight !== undefined) {
                localVarQueryParameter['highlight'] = highlight;
            }

            if (difficultyfilter !== undefined) {
                localVarQueryParameter['difficultyfilter'] = difficultyfilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity Single
         * @param {string} id ID of the Activity
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivitySingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activityGetActivitySingle.');
            }
            const localVarPath = `/v1/Activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity Single Localized
         * @param {string} id ID of the Activity
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivitySingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activityGetActivitySingleLocalized.');
            }
            const localVarPath = `/v1/ActivityLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetAllActivityChanged: async (pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ActivityChanged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetAllActivityTypesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ActivityTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Activity Type Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetAllActivityTypesSingle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activityGetAllActivityTypesSingle.');
            }
            const localVarPath = `/v1/ActivityTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Activity List Localized
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetActivityFilteredLocalized(language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GBLTSActivityPoiLocalized>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity List
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetActivityList(language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, updatefrom?: string, searchfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GBLTSActivity>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity List Reduced
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetActivityReduced(language?: string, activitytype?: string, subtype?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityPoiReduced>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity Single
         * @param {string} id ID of the Activity
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetActivitySingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GBLTSActivity>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivitySingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity Single Localized
         * @param {string} id ID of the Activity
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetActivitySingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GBLTSActivityPoiLocalized>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetActivitySingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetAllActivityChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GBLTSActivity>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetAllActivityTypesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityTypes>>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetAllActivityTypesList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Activity Type Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activityGetAllActivityTypesSingle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityTypes>> {
            const localVarAxiosArgs = await ActivityApiAxiosParamCreator(configuration).activityGetAllActivityTypesSingle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Activity List Localized
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivityFilteredLocalized(language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<GBLTSActivityPoiLocalized>> {
            return ActivityApiFp(configuration).activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity List
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivityList(language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, updatefrom?: string, searchfilter?: string, options?: any): AxiosPromise<Array<GBLTSActivity>> {
            return ActivityApiFp(configuration).activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity List Reduced
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
         * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
         * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
         * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
         * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
         * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
         * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivityReduced(language?: string, activitytype?: string, subtype?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options?: any): AxiosPromise<Array<ActivityPoiReduced>> {
            return ActivityApiFp(configuration).activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity Single
         * @param {string} id ID of the Activity
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivitySingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<GBLTSActivity> {
            return ActivityApiFp(configuration).activityGetActivitySingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity Single Localized
         * @param {string} id ID of the Activity
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetActivitySingleLocalized(id: string, language?: string, options?: any): AxiosPromise<GBLTSActivityPoiLocalized> {
            return ActivityApiFp(configuration).activityGetActivitySingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetAllActivityChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): AxiosPromise<Array<GBLTSActivity>> {
            return ActivityApiFp(configuration).activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetAllActivityTypesList(options?: any): AxiosPromise<Array<ActivityTypes>> {
            return ActivityApiFp(configuration).activityGetAllActivityTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Activity Type Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityGetAllActivityTypesSingle(id: string, options?: any): AxiosPromise<ActivityTypes> {
            return ActivityApiFp(configuration).activityGetAllActivityTypesSingle(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * 
     * @summary GET Activity List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetActivityFilteredLocalized(language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetActivityFilteredLocalized(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity List
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetActivityList(language?: string, pagenumber?: number, pagesize?: number, activitytype?: string, subtype?: string, idlist?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, updatefrom?: string, searchfilter?: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetActivityList(language, pagenumber, pagesize, activitytype, subtype, idlist, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, updatefrom, searchfilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [activitytype] Type of the Activity (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK: &#x27;Mountains &#x3D; 1&#x27;,&#x27;Cycling &#x3D; 2&#x27;,&#x27;Local tours &#x3D; 4&#x27;,&#x27;Horses &#x3D; 8&#x27;,&#x27;Hiking &#x3D; 16&#x27;,&#x27;Running and fitness &#x3D; 32&#x27;,&#x27;Cross-country ski-track &#x3D; 64&#x27;,&#x27;Tobbogan run &#x3D; 128&#x27;,&#x27;Slopes &#x3D; 256&#x27;,&#x27;Lifts &#x3D; 512&#x27;), (default:&#x27;1023&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /v1/ActivityTypes
     * @param {string} [subtype] Subtype of the Activity (BITMASK Filter &#x3D; available SubTypes depends on the selected Activity Type), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [areafilter] AreaFilter (Alternate Locfilter, can be combined with locfilter) (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMASSOCIATIONID &#x3D; (Filter by Tourismassociation), skr + SKIREGIONID &#x3D; (Filter by Skiregion), ska + SKIAREAID &#x3D; (Filter by Skiarea), are + AREAID &#x3D; (Filter by LTS Area), &#x27;null&#x27; &#x3D; No Filter), (default:&#x27;null&#x27;)
     * @param {string} [distancefilter] Distance Range Filter (Separator &#x27;,&#x27; example Value: 15,40 Distance from 15 up to 40 Km), (default:&#x27;null&#x27;)
     * @param {string} [altitudefilter] Altitude Range Filter (Separator &#x27;,&#x27; example Value: 500,1000 Altitude from 500 up to 1000 metres), (default:&#x27;null&#x27;)
     * @param {string} [durationfilter] Duration Range Filter (Separator &#x27;,&#x27; example Value: 1,3 Duration from 1 to 3 hours), (default:&#x27;null&#x27;)
     * @param {boolean} [highlight] Hightlight Filter (possible values: &#x27;false&#x27; &#x3D; only Activities with Highlight false, &#x27;true&#x27; &#x3D; only Activities with Highlight true), (default:&#x27;null&#x27;)
     * @param {string} [difficultyfilter] Difficulty Filter (possible values: &#x27;1&#x27; &#x3D; easy, &#x27;2&#x27; &#x3D; medium, &#x27;3&#x27; &#x3D; difficult), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/SmgTag/ByMainEntity/Activity&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Activities Filter (possible Values: &#x27;true&#x27; only Active Activities, &#x27;false&#x27; only Disabled Activities
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Activities Filter (possible Values: &#x27;true&#x27; only published Activities, &#x27;false&#x27; only not published Activities, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetActivityReduced(language?: string, activitytype?: string, subtype?: string, locfilter?: string, areafilter?: string, distancefilter?: string, altitudefilter?: string, durationfilter?: string, highlight?: boolean, difficultyfilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetActivityReduced(language, activitytype, subtype, locfilter, areafilter, distancefilter, altitudefilter, durationfilter, highlight, difficultyfilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity Single
     * @param {string} id ID of the Activity
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetActivitySingle(id: string, fields?: string, language?: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetActivitySingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity Single Localized
     * @param {string} id ID of the Activity
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetActivitySingleLocalized(id: string, language?: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetActivitySingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetAllActivityChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetAllActivityChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetAllActivityTypesList(options?: any) {
        return ActivityApiFp(this.configuration).activityGetAllActivityTypesList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Activity Type Single
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public activityGetAllActivityTypesSingle(id: string, options?: any) {
        return ActivityApiFp(this.configuration).activityGetAllActivityTypesSingle(id, options).then((request) => request(this.axios, this.basePath));
    }
}
