/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Gastronomy } from '../models';
import { GastronomyLocalized } from '../models';
import { GastronomyReduced } from '../models';
import { GastronomyTypes } from '../models';
/**
 * GastronomyApi - axios parameter creator
 * @export
 */
export const GastronomyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Gastronomy Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetAllGastronomyChanged: async (pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/GastronomyChanged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetAllGastronomyTypesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/GastronomyTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy Types Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetApiGastronomyTypesById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling gastronomyGetApiGastronomyTypesById.');
            }
            const localVarPath = `/v1/GastronomyTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomyList: async (pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/Gastronomy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (dishcodefilter !== undefined) {
                localVarQueryParameter['dishcodefilter'] = dishcodefilter;
            }

            if (ceremonycodefilter !== undefined) {
                localVarQueryParameter['ceremonycodefilter'] = ceremonycodefilter;
            }

            if (categorycodefilter !== undefined) {
                localVarQueryParameter['categorycodefilter'] = categorycodefilter;
            }

            if (facilitycodefilter !== undefined) {
                localVarQueryParameter['facilitycodefilter'] = facilitycodefilter;
            }

            if (cuisinecodefilter !== undefined) {
                localVarQueryParameter['cuisinecodefilter'] = cuisinecodefilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            localVarQueryParameter['origin'] = "webcomp-tourism-detail";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomyListLocalized: async (language?: string, pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/GastronomyLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (dishcodefilter !== undefined) {
                localVarQueryParameter['dishcodefilter'] = dishcodefilter;
            }

            if (ceremonycodefilter !== undefined) {
                localVarQueryParameter['ceremonycodefilter'] = ceremonycodefilter;
            }

            if (categorycodefilter !== undefined) {
                localVarQueryParameter['categorycodefilter'] = categorycodefilter;
            }

            if (facilitycodefilter !== undefined) {
                localVarQueryParameter['facilitycodefilter'] = facilitycodefilter;
            }

            if (cuisinecodefilter !== undefined) {
                localVarQueryParameter['cuisinecodefilter'] = cuisinecodefilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomyListReduced: async (language?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/GastronomyReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (locfilter !== undefined) {
                localVarQueryParameter['locfilter'] = locfilter;
            }

            if (dishcodefilter !== undefined) {
                localVarQueryParameter['dishcodefilter'] = dishcodefilter;
            }

            if (ceremonycodefilter !== undefined) {
                localVarQueryParameter['ceremonycodefilter'] = ceremonycodefilter;
            }

            if (categorycodefilter !== undefined) {
                localVarQueryParameter['categorycodefilter'] = categorycodefilter;
            }

            if (facilitycodefilter !== undefined) {
                localVarQueryParameter['facilitycodefilter'] = facilitycodefilter;
            }

            if (cuisinecodefilter !== undefined) {
                localVarQueryParameter['cuisinecodefilter'] = cuisinecodefilter;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy Single
         * @param {string} id ID of the Gastronomy
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomySingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling gastronomyGetGastronomySingle.');
            }
            const localVarPath = `/v1/Gastronomy/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Gastronomy Localized Single
         * @param {string} id ID of the Gastronomy
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomySingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling gastronomyGetGastronomySingleLocalized.');
            }
            const localVarPath = `/v1/GastronomyLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GastronomyApi - functional programming interface
 * @export
 */
export const GastronomyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Gastronomy Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetAllGastronomyChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Gastronomy>>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetAllGastronomyTypesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GastronomyTypes>>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetAllGastronomyTypesList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy Types Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetApiGastronomyTypesById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GastronomyTypes>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetApiGastronomyTypesById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetGastronomyList(pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Gastronomy>>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetGastronomyListLocalized(language?: string, pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GastronomyLocalized>>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetGastronomyListReduced(language?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GastronomyReduced>>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy Single
         * @param {string} id ID of the Gastronomy
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetGastronomySingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gastronomy>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomySingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Gastronomy Localized Single
         * @param {string} id ID of the Gastronomy
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gastronomyGetGastronomySingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GastronomyLocalized>> {
            const localVarAxiosArgs = await GastronomyApiAxiosParamCreator(configuration).gastronomyGetGastronomySingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GastronomyApi - factory interface
 * @export
 */
export const GastronomyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Gastronomy Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetAllGastronomyChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): AxiosPromise<Array<Gastronomy>> {
            return GastronomyApiFp(configuration).gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetAllGastronomyTypesList(options?: any): AxiosPromise<Array<GastronomyTypes>> {
            return GastronomyApiFp(configuration).gastronomyGetAllGastronomyTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy Types Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetApiGastronomyTypesById(id: string, options?: any): AxiosPromise<GastronomyTypes> {
            return GastronomyApiFp(configuration).gastronomyGetApiGastronomyTypesById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomyList(pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): AxiosPromise<Array<Gastronomy>> {
            return GastronomyApiFp(configuration).gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy Localized List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomyListLocalized(language?: string, pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options?: any): AxiosPromise<Array<GastronomyLocalized>> {
            return GastronomyApiFp(configuration).gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy Reduced List
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
         * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
         * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
         * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
         * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
         * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
         * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
         * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
         * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
         * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomyListReduced(language?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options?: any): AxiosPromise<Array<GastronomyReduced>> {
            return GastronomyApiFp(configuration).gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy Single
         * @param {string} id ID of the Gastronomy
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomySingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Gastronomy> {
            return GastronomyApiFp(configuration).gastronomyGetGastronomySingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Gastronomy Localized Single
         * @param {string} id ID of the Gastronomy
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gastronomyGetGastronomySingleLocalized(id: string, language?: string, options?: any): AxiosPromise<GastronomyLocalized> {
            return GastronomyApiFp(configuration).gastronomyGetGastronomySingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GastronomyApi - object-oriented interface
 * @export
 * @class GastronomyApi
 * @extends {BaseAPI}
 */
export class GastronomyApi extends BaseAPI {
    /**
     * 
     * @summary GET Gastronomy Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Gastronomy with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetAllGastronomyChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetAllGastronomyChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetAllGastronomyTypesList(options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetAllGastronomyTypesList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy Types Single
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetApiGastronomyTypesById(id: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetApiGastronomyTypesById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetGastronomyList(pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetGastronomyList(pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, fields, language, updatefrom, searchfilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy Localized List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Activity IDs), (default:&#x27;null&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetGastronomyListLocalized(language?: string, pagenumber?: number, pagesize?: number, idlist?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, latitude?: string, longitude?: string, radius?: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetGastronomyListLocalized(language, pagenumber, pagesize, idlist, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, seed, latitude, longitude, radius, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy Reduced List
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [locfilter] Locfilter (Separator &#x27;,&#x27; possible values: reg + REGIONID &#x3D; (Filter by Region), reg + REGIONID &#x3D; (Filter by Region), tvs + TOURISMVEREINID &#x3D; (Filter by Tourismverein), mun + MUNICIPALITYID &#x3D; (Filter by Municipality), fra + FRACTIONID &#x3D; (Filter by Fraction)), (default:&#x27;null&#x27;)
     * @param {string} [dishcodefilter] Dish Code Filter (BITMASK values: 1 &#x3D; (Speisen), 2 &#x3D; (Vorspeise), 4 &#x3D; (Hauptspeise), 8 &#x3D; (Nachspeise), 16 &#x3D; (Tagesgericht), 32 &#x3D; (Men端), 64 &#x3D; (Degustationsmen端), 128 &#x3D; (Kindermen端s), 256 &#x3D; (Mittagsmen端s)
     * @param {string} [ceremonycodefilter] Ceremony Code Filter (BITMASK  values: 1 &#x3D; (Familienfeiern), 2 &#x3D; (Hochzeiten), 4 &#x3D; (Geburtstagsfeiern), 8 &#x3D; (Firmenessen), 16 &#x3D; (Weihnachtsessen), 32 &#x3D; (Sylvestermen端), 64 &#x3D; (Seminare / Tagungen), 128 &#x3D; (Versammlungen)
     * @param {string} [categorycodefilter] Category Code Filter (BITMASK  values: 1 &#x3D; (Restaurant), 2 &#x3D; (Bar / Caf辿 / Bistro), 4 &#x3D; (Pub / Disco), 8 &#x3D; (Apres Ski), 16 &#x3D; (Jausenstation), 32 &#x3D; (Pizzeria), 64 &#x3D; (B辰uerlicher Schankbetrieb), 128 &#x3D; (Buschenschank), 256 &#x3D; (Hofschank), 512 &#x3D; (T旦rggele Lokale), 1024 &#x3D; (Schnellimbiss), 2048 &#x3D; (Mensa), 4096 &#x3D; (Vinothek /Weinhaus / Taverne), 8192 &#x3D; (Eisdiele), 16348 &#x3D; (Gasthaus), 32768 &#x3D; (Gasthof), 65536 &#x3D; (Braugarten), 131072 &#x3D; (Schutzh端tte), 262144 &#x3D; (Alm), 524288 &#x3D; (Skih端tte)
     * @param {string} [facilitycodefilter] Facility Code Filter (BITMASK  values: 1 &#x3D; (American Express), 2 &#x3D; (Diners Club), 4 &#x3D; (Eurocard / Mastercard), 8 &#x3D; (Visa), 16 &#x3D; (Hunde erlaubt), 32 &#x3D; (Geeignet f端r Busse), 64 &#x3D; (Garten), 128 &#x3D; (Garagen), 256 &#x3D; (Bierbar), 512 &#x3D; (Kinderspielplatz), 1024 &#x3D; (Spielzimmer), 2048 &#x3D; (Spielplatz), 4096 &#x3D; (Parkpl辰tze), 8192 &#x3D; (Raucherr辰ume), 16348 &#x3D; (Terrasse), 32768 &#x3D; (Behindertengerecht), 65536 &#x3D; (Biergarten), 131072 &#x3D; (Aussichtsterrasse), 262144 &#x3D; (Wintergarten), 524288 &#x3D; (Gault Millau S端dtirol), 1048576 &#x3D; (Guida Espresso), 2097152 &#x3D; (Gambero Rosso), 4194304 &#x3D; (Feinschmecker), 8388608 &#x3D; (Aral Schlemmer Atlas), 16777216 &#x3D; (Varta F端hrer), 33554432 &#x3D; (Bertelsmann), 67108864 &#x3D; (Preis f端r S端dtiroler Weinkultur), 134217728 &#x3D; (Michelin), 268435456 &#x3D; (Roter Hahn), 536870912 &#x3D; (Tafelspitz))
     * @param {string} [cuisinecodefilter] Cuisine Code Filter (BITMASK  values: 1 &#x3D; (Vegetarische K端che), 2 &#x3D; (Glutenfreie K端che), 4 &#x3D; (Laktosefreie Kost), 8 &#x3D; (Warme K端che), 16 &#x3D; (S端dtiroler Spezialit辰ten), 32 &#x3D; (Gourmet K端che), 64 &#x3D; (Italienische K端che), 128 &#x3D; (Internationale K端che), 256 &#x3D; (Pizza), 512 &#x3D; (Fischspezialit辰ten), 1024 &#x3D; (Asiatische K端che), 2048 &#x3D; (Wildspezialit辰ten), 4096 &#x3D; (Produkte eigener Erzeugung), 8192 &#x3D; (Di辰tk端che), 16348 &#x3D; (Grillspezialit辰ten), 32768 &#x3D; (Ladinische K端che), 65536 &#x3D; (Kleine Karte), 131072 &#x3D; (Fischwochen), 262144 &#x3D; (Spargelwochen), 524288 &#x3D; (Lammwochen), 1048576 &#x3D; (Wildwochen), 2097152 &#x3D; (Vorspeisewochen), 4194304 &#x3D; (Nudelwochen), 8388608 &#x3D; (Kr辰uterwochen), 16777216 &#x3D; (Kindermen端s), 33554432 &#x3D; (Mittagsmen端s))
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;gastronomy&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Gastronomies Filter (possible Values: &#x27;true&#x27; only Active Gastronomies, &#x27;false&#x27; only Disabled Gastronomies
     * @param {boolean} [odhactive] ODH Active (Published) Gastronomies Filter (Refers to field SmgActive) Gastronomies Filter (possible Values: &#x27;true&#x27; only published Gastronomies, &#x27;false&#x27; only not published Gastronomies, (default:&#x27;null&#x27;)
     * @param {string} [latitude] GeoFilter Latitude Format: &#x27;46.624975&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [longitude] GeoFilter Longitude Format: &#x27;11.369909&#x27;, &#x27;null&#x27; &#x3D; disabled, (default:&#x27;null&#x27;)
     * @param {string} [radius] Radius to Search in Meters. Only Object withhin the given point and radius are returned and sorted by distance. Random Sorting is disabled if the GeoFilter Informations are provided, (default:&#x27;null&#x27;)
     * @param {string} [fields] Select fields to display, by Default Title and Id are selected if fields filter is null More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetGastronomyListReduced(language?: string, locfilter?: string, dishcodefilter?: string, ceremonycodefilter?: string, categorycodefilter?: string, facilitycodefilter?: string, cuisinecodefilter?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, latitude?: string, longitude?: string, radius?: string, fields?: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetGastronomyListReduced(language, locfilter, dishcodefilter, ceremonycodefilter, categorycodefilter, facilitycodefilter, cuisinecodefilter, odhtagfilter, active, odhactive, latitude, longitude, radius, fields, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetGastronomySingle(id: string, fields?: string, language?: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetGastronomySingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Gastronomy Localized Single
     * @param {string} id ID of the Gastronomy
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GastronomyApi
     */
    public gastronomyGetGastronomySingleLocalized(id: string, language?: string, options?: any) {
        return GastronomyApiFp(this.configuration).gastronomyGetGastronomySingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
}
